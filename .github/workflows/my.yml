  name: Android Emulator + Tailscale (Basic)

  on:
    workflow_dispatch:
      inputs:
        ts_tailnet:
          description: "Tailscale tailnet (e.g. you@gmail.com)"
          required: true
        ts_api_key:
          description: "Tailscale API key (device admin, no Bearer)"
          required: true
        ts_authkey:
          description: "Tailscale Auth key (reusable or ephemeral)"
          required: true
        quick_test:
          description: "Run 5-minute test"
          type: boolean
          default: false
        runtime_minutes:
          description: "Runtime (max 360; default 355 when not test)"
          required: false
          default: "355"
        android_api:
          description: "Android API level (29, 30, 31, 33, 34)"
          required: false
          default: "30"

  permissions:
    contents: read
    actions: write

  jobs:
    android:
      runs-on: ubuntu-latest
      timeout-minutes: 370

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Enable KVM group perms
          run: |
            echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
            sudo udevadm control --reload-rules
            sudo udevadm trigger --name-match=kvm

        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'

        - name: Setup Android SDK
          uses: android-actions/setup-android@v3

        - name: Install Android SDK components
          run: |
            yes | sdkmanager --licenses || true
            sdkmanager --install "platform-tools" "platforms;android-${{ inputs.android_api }}"
            sdkmanager --install "system-images;android-${{ inputs.android_api }};google_apis;x86_64"
            sdkmanager --install "emulator"
            sdkmanager --install "build-tools;34.0.0"
            
            echo "Installed packages:"
            sdkmanager --list_installed

        - name: Create AVD (simple)
          run: |
            # Create AVD with minimal config
            echo "no" | avdmanager create avd \
              -n android_emulator \
              -k "system-images;android-${{ inputs.android_api }};google_apis;x86_64" \
              -d pixel
            
            echo "AVD created successfully"

        - name: Install Tailscale
          run: |
            curl -fsSL https://tailscale.com/install.sh | sh
            sudo tailscale up --authkey="${{ inputs.ts_authkey }}" --hostname="android-emu" --accept-dns=true --accept-routes=true
            TAILSCALE_IP=$(tailscale ip -4)
            echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
            echo "Tailscale IPv4: $TAILSCALE_IP"

        - name: Start Android Emulator in background
          run: |
            # Start emulator with basic config
            nohup $ANDROID_HOME/emulator/emulator \
              -avd android_emulator \
              -no-snapshot-save \
              -no-window \
              -gpu swiftshader_indirect \
              -no-audio \
              -no-boot-anim \
              > emulator.log 2>&1 &
            
            echo "Emulator started, waiting for boot..."

        - name: Wait for emulator to boot
          run: |
            adb wait-for-device
            
            # Wait for boot complete
            timeout=300
            until adb shell getprop sys.boot_completed | grep -q 1; do
              echo "Waiting for boot to complete..."
              sleep 5
              timeout=$((timeout - 5))
              if [ $timeout -le 0 ]; then
                echo "Emulator boot timeout!"
                cat emulator.log
                exit 1
              fi
            done
            
            echo "Emulator booted successfully!"
            adb devices -l

        - name: Verify emulator is ready
          run: |
            echo "Emulator is ready!"
            adb shell getprop ro.build.version.release
            adb shell getprop ro.product.manufacturer
            adb shell getprop ro.product.model

        - name: Configure ADB over network
          run: |
            # Enable ADB over TCP on port 5555
            adb tcpip 5555
            sleep 2
            
            # Get emulator IP (usually 10.0.2.15 for emulator)
            EMU_IP=$(adb shell ip addr show | grep "inet " | grep -v "127.0.0.1" | head -1 | awk '{print $2}' | cut -d/ -f1)
            echo "EMU_IP=$EMU_IP" >> $GITHUB_ENV
            echo "Emulator IP: $EMU_IP"
            
            # Test connection
            adb connect localhost:5555

        - name: Install scrcpy (optional)
          run: |
            sudo apt-get update
            sudo apt-get install -y scrcpy || echo "scrcpy install failed, skipping"

        - name: Install useful Android tools
          run: |
            # Install common tools
            adb shell "pm install -r /system/priv-app/*/base.apk" || true
            
            # Enable developer options
            adb shell "settings put global development_settings_enabled 1"
            adb shell "settings put global adb_enabled 1"
            
            # Disable screen lock
            adb shell "settings put global stay_on_while_plugged_in 7"
            adb shell "settings put system screen_off_timeout 2147483647"

        - name: Setup socat for port forwarding
          run: |
            sudo apt-get install -y socat
            
            # Forward ADB port 5555 to be accessible via Tailscale
            nohup socat TCP-LISTEN:5555,fork,reuseaddr TCP:localhost:5555 &
            
            echo "Port forwarding ready"

        - name: Display connection information
          run: |
            echo "=========================================="
            echo "Android Emulator Ready!"
            echo "=========================================="
            echo ""
            echo "Tailscale IP: $TAILSCALE_IP"
            echo ""
            echo "ADB Connection:"
            echo "  adb connect $TAILSCALE_IP:5555"
            echo "  adb root"
            echo "  adb shell"
            echo ""
            echo "Device Info:"
            adb shell getprop ro.build.version.release
            adb shell getprop ro.product.model
            adb shell getprop ro.build.version.sdk
            echo ""
            echo "Status: Running"
            echo "=========================================="

        - name: Calculate runtime
          run: |
            if [ "${{ inputs.quick_test }}" = "true" ]; then
              RUNTIME=5
            else
              RUNTIME=${{ inputs.runtime_minutes }}
              if [ $RUNTIME -lt 6 ]; then RUNTIME=355; fi
              if [ $RUNTIME -gt 360 ]; then RUNTIME=355; fi
            fi
            echo "RUNTIME_MINUTES=$RUNTIME" >> $GITHUB_ENV
            echo "Runtime set to: $RUNTIME minutes"

        - name: Keep alive and monitor
          run: |
            END_TIME=$(($(date +%s) + ($RUNTIME_MINUTES * 60)))
            
            while [ $(date +%s) -lt $END_TIME ]; do
              CURRENT=$(date '+%H:%M:%S')
              END=$(date -d "@$END_TIME" '+%H:%M:%S')
              
              # Check emulator status
              if ! adb devices | grep -q "emulator"; then
                echo "Emulator disconnected! Attempting reconnect..."
                adb connect localhost:5555
              fi
              
              # Display heartbeat
              echo "[Android Emulator] Heartbeat $CURRENT | Ends at $END | Tailscale: $TAILSCALE_IP | ADB: 5555"
              
              # Show resource usage
              echo "CPU: $(adb shell "top -n 1 | head -5" 2>/dev/null | tail -1 || echo 'N/A')"
              
              sleep 60
            done
            
            echo "Runtime completed. Shutting down..."

        - name: Cleanup
          if: always()
          run: |
            echo "Stopping emulator..."
            adb emu kill || true
            
            echo "Tailscale logout..."
            sudo tailscale logout || true
            
            echo "Cleanup complete"

        - name: Upload emulator logs
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: emulator-logs
            path: emulator.log
            retention-days: 1
