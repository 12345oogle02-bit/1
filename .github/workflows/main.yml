name: macOS VNC via ZeroTier (Python-fixed TigerVNC)

on:
  workflow_dispatch:
    inputs:
      zerotier_network:
        description: "ZeroTier Network ID (from https://my.zerotier.com)"
        required: true
      vnc_password:
        description: "VNC password (max 8 chars)"
        required: false
        default: "12345678"
      runtime_minutes:
        description: "Keep-alive runtime (max 360)"
        required: false
        default: "120"

jobs:
  vnc:
    runs-on: macos-13
    timeout-minutes: 370
    steps:
      - name: Download and extract TigerVNC via Python
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
import os, sys, tarfile, urllib.request, ssl, platform

# Pick correct filename for macOS-13 (Intel runner)
arch = platform.machine().lower()
# Intel = x86_64; Apple Silicon = arm64 (Darwin universal builds are rare for tarballs)
if arch in ("x86_64", "amd64"):
    fname = "TigerVNC-1.13.1-x86_64-Darwin.tar.gz"
elif arch in ("arm64", "aarch64"):
    # If you ever switch to macos-14 (ARM), use the arm tarball
    fname = "TigerVNC-1.13.1-arm64-Darwin.tar.gz"
else:
    print(f"Unsupported arch: {arch}", file=sys.stderr)
    sys.exit(1)

# Reliable mirrors to try (SourceForge direct mirror first, then the 'download' page)
candidates = [
    f"https://downloads.sourceforge.net/project/tigervnc/stable/1.13.1/{fname}",
    f"https://sourceforge.net/projects/tigervnc/files/stable/1.13.1/{fname}/download",
]

ua = ("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
      "AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Safari/605.1.15")
ctx = ssl.create_default_context()
ctx.set_ciphers('DEFAULT@SECLEVEL=1')  # SF mirrors can be picky

dst = "/tmp/tigervnc.tar.gz"
ok = False
last_err = None

for url in candidates:
    try:
        req = urllib.request.Request(url, headers={"User-Agent": ua})
        with urllib.request.urlopen(req, context=ctx, timeout=60) as r, open(dst, "wb") as f:
            f.write(r.read())
        # Validate gzip magic number
        with open(dst, "rb") as f:
            magic = f.read(2)
        if magic != b"\x1f\x8b":
            raise RuntimeError(f"Not a gzip archive; got magic={magic!r} from {url}")
        ok = True
        print(f"Downloaded: {url} -> {dst}")
        break
    except Exception as e:
        last_err = e
        print(f"[warn] download failed from {url}: {e}", file=sys.stderr)

if not ok:
    print(f"All download attempts failed: {last_err}", file=sys.stderr)
    sys.exit(2)

# Extract to /tmp/vncbin
outdir = "/tmp/vncbin"
os.makedirs(outdir, exist_ok=True)
with tarfile.open(dst, "r:gz") as tf:
    tf.extractall(outdir)

# Expect the archive to contain a 'vncserver' binary in the top dir
# Normalize path
for root, dirs, files in os.walk(outdir):
    if "vncserver" in files:
        print("TigerVNC extracted to:", root)
        # Write a marker file so next step knows where it is
        with open("/tmp/vnc_path.txt", "w") as m:
            m.write(root)
        break
else:
    print("vncserver not found in extracted archive", file=sys.stderr)
    sys.exit(3)
PY
          echo "TigerVNC path:"
          cat /tmp/vnc_path.txt

      - name: Set VNC password and start server (port 5901)
        shell: bash
        run: |
          set -euo pipefail
          VNCDIR="$(cat /tmp/vnc_path.txt)"
          mkdir -p "$HOME/.vnc"
          VNC_PW="${{ inputs.vnc_password }}"
          VNC_PW="${VNC_PW:0:8}"
          # TigerVNC accepts a raw password file when given with -rfbauth
          printf '%s' "$VNC_PW" > "$HOME/.vnc/passwd"
          chmod 600 "$HOME/.vnc/passwd"
          echo "Starting TigerVNC from $VNCDIR ..."
          nohup "$VNCDIR/vncserver" :1 -geometry 1280x720 -rfbauth "$HOME/.vnc/passwd" > "$HOME/vnc.log" 2>&1 &
          sleep 5
          echo "TigerVNC running on port 5901 (display :1)."

      - name: Install and join ZeroTier
        shell: bash
        run: |
          set -euo pipefail
          curl -fL https://install.zerotier.com/ -o zt.sh
          sudo bash zt.sh
          sudo zerotier-cli status || true
          sudo zerotier-cli join "${{ inputs.zerotier_network }}"
          echo "Joined ZeroTier network: ${{ inputs.zerotier_network }}"
          echo "Authorize this member in the ZeroTier dashboard."

      - name: Wait for ZeroTier IP
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..24}; do
            IP="$(sudo zerotier-cli listnetworks 2>/dev/null | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1 || true)"
            [ -n "$IP" ] && break
            sleep 5
          done
          if [ -n "$IP" ]; then
            echo "ZT_IP=$IP" >> "$GITHUB_ENV"
            echo "===================================="
            echo "Connect your VNC client to: $IP:5901"
            echo "Password: first 8 chars you entered"
            echo "===================================="
          else
            echo "No ZeroTier IP yet. Authorize this node in the dashboard, then use <ZT IP>:5901."
          fi

      - name: Keep alive
        shell: bash
        run: |
          rt="${{ inputs.runtime_minutes }}"
          [[ "$rt" =~ ^[0-9]+$ ]] || rt=120
          (( rt > 360 )) && rt=360
          end=$(( $(date +%s) + 60 * rt ))
          while (( $(date +%s) < end )); do
            echo "[VNC+ZT] Heartbeat $(date '+%H:%M:%S') | ${ZT_IP:-authorize}:5901"
            sleep 60
          done
