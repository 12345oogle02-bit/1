name: VNC via ZeroTier + TigerVNC (macOS)

on:
  workflow_dispatch:
    inputs:
      zerotier_network:
        description: "ZeroTier Network ID (from https://my.zerotier.com)"
        required: true
      vnc_password:
        description: "VNC password (max 8 chars; extras ignored)"
        required: false
        default: "12345678"
      runtime_minutes:
        description: "Keep-alive runtime (max 360 min)"
        required: false
        default: "120"

permissions:
  contents: read

jobs:
  vnc:
    runs-on: macos-13   # Intel runner; if you prefer Apple Silicon, change to macos-14
    timeout-minutes: 370
    steps:
      - name: üìå What this run does
        shell: bash
        run: |
          echo "==============================================="
          echo "This workflow will:"
          echo "  ‚Ä¢ Install ZeroTier and join your network"
          echo "  ‚Ä¢ Start a TigerVNC server (standard VNC) on port 5901"
          echo "  ‚Ä¢ Print the ZeroTier IP once authorized"
          echo "Connect from any VNC app to: <ZeroTier IP>:5901"
          echo "Password = first 8 chars you enter below"
          echo "==============================================="

      # We use TigerVNC instead of Apple's ARD so every VNC client works
      - name: Install TigerVNC & set password
        shell: bash
        run: |
          set -euo pipefail
          brew update >/dev/null
          brew install tigervnc >/dev/null
          mkdir -p "$HOME/.vnc"
          # Trim to 8 chars (classic VNC limiter)
          VNC_PW="${{ inputs.vnc_password }}"
          VNC_PW="${VNC_PW:0:8}"
          # Create passwd file
          (command -v vncpasswd >/dev/null && vncpasswd -f <<<"$VNC_PW") > "$HOME/.vnc/passwd"
          chmod 600 "$HOME/.vnc/passwd"
          # Start server on :1 -> TCP 5901
          VNC_BIN="$(command -v vncserver)"
          nohup "$VNC_BIN" -geometry 1280x720 -SecurityTypes VncAuth :1 > "$HOME/vnc.log" 2>&1 &
          sleep 3
          echo "‚úÖ TigerVNC started on display :1 (TCP 5901)"

      - name: Install & join ZeroTier
        shell: bash
        run: |
          set -euo pipefail
          curl -fL https://install.zerotier.com/ -o zt.sh
          sudo bash zt.sh
          sudo zerotier-cli status || true
          sudo zerotier-cli join "${{ inputs.zerotier_network }}"
          echo "‚úÖ Joined ZeroTier network: ${{ inputs.zerotier_network }}"
          echo "üîê Go to https://my.zerotier.com ‚Üí Networks ‚Üí authorize this member."

      - name: Wait for ZeroTier authorization & fetch IP
        shell: bash
        run: |
          set -euo pipefail
          # Try for ~90s to get a managed IP
          for i in {1..18}; do
            # Prefer JSON output if available
            IP_JSON=$(sudo zerotier-cli listnetworks -j 2>/dev/null | \
              python3 - <<'PY'
import sys, json, re
try:
  data=json.load(sys.stdin)
  for n in data:
    for a in n.get("assignedAddresses", []):
      ip=a.split('/')[0]
      if re.match(r'^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.)', ip):
        print(ip); raise SystemExit
except Exception:
  pass
PY
            )
            if [ -n "$IP_JSON" ]; then IP="$IP_JSON"; fi
            # Fallback: parse plain text
            if [ -z "${IP:-}" ]; then
              IP=$(sudo zerotier-cli listnetworks 2>/dev/null | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n1 || true)
            fi
            if [ -n "${IP:-}" ]; then break; fi
            sleep 5
          done

          if [ -z "${IP:-}" ]; then
            echo "‚ö†Ô∏è No ZeroTier IP yet. Ensure you authorized this device in the ZeroTier dashboard."
            echo "Once authorized, connect your VNC client to: <that ZeroTier IP>:5901"
          else
            echo "ZT_IP=$IP" >> "$GITHUB_ENV"
            echo "==============================================="
            echo "‚úÖ Connect now with ANY VNC client:"
            echo "Address : $IP:5901"
            echo "Password: first 8 chars you entered"
            echo "==============================================="
          fi

      - name: Keep alive
        shell: bash
        run: |
          rt="${{ inputs.runtime_minutes }}"
          [[ "$rt" =~ ^[0-9]+$ ]] || rt=120
          (( rt > 360 )) && rt=360
          end=$(( $(date +%s) + 60 * rt ))
          while (( $(date +%s) < end )); do
            ts=$(date '+%H:%M:%S')
            echo "[ZeroTier+TigerVNC] Heartbeat $ts | target: ${ZT_IP:-authorize in dashboard}:5901"
            sleep 60
          done
